# cookies.py
# Gets the cookies from the browser session to access restricted content

import json
import os
import time
import re
from datetime import datetime
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from tiktok_captcha_solver import SeleniumSolver

# Function to initialize the captcha solver
def init_captcha(api_key, platform, driver):
    match platform:
        case "tiktok":
            return SeleniumSolver(driver, api_key, mouse_step_size=1, mouse_step_delay_ms=10)
        case _:
            raise Exception("Unsupported platform")

# Function to save cookies to a file
def save_cookies_to_file(cookies, filename):
    with open("cookies/"+filename, "w") as file:
        file.write("# Netscape HTTP Cookie File\n")
        file.write("# This file was generated by Selenium\n")
        file.write("\n")
        for cookie in cookies:
            file.write(f"{cookie['domain']}\t"
                       f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t"
                       f"{cookie['path']}\t"
                       f"{'TRUE' if cookie['secure'] else 'FALSE'}\t"
                       f"{cookie['expiry'] if 'expiry' in cookie else '0'}\t"
                       f"{cookie['name']}\t"
                       f"{cookie['value']}\n")
        print("Cookies saved to 'cookies/"+filename+"'")

# Function to log into services
def login_to_service(platform, username, password, username_field, password_field, login_button, captcha_api_key=None, captcha_driver=None, accept_cookies_button=None):

    # Accept cookies if present
    if accept_cookies_button:
        try:
            accept_cookies_button.click()
            time.sleep(2)  # Wait for the cookies acceptance to be processed
        except Exception as e:
            print(f"Accept cookies button not found or not clickable: {e}")

    # Fill in the login form
    username_field.send_keys(username)
    password_field.send_keys(password)
    login_button.click()
    time.sleep(10)  # Wait for login to complete

    # Solve captcha if present
    if captcha_api_key:
        sadcaptcha = init_captcha(captcha_api_key, platform, captcha_driver)
        sadcaptcha.solve_captcha_if_present()
        time.sleep(10)  # Wait for captcha to be solved

    # Check if login was successful
    if "login" not in driver.current_url:
        print("Login successful!")

        # Extract cookies
        cookies = driver.get_cookies()

        # Save cookies
        cookies_filename = f"{platform}.txt"
        save_cookies_to_file(cookies, cookies_filename)
    else:
        print("Login failed. Check your credentials or handle 2FA if enabled.")

# Function to initialize the driver
def init_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.6943.53 Safari/537.36")
    return webdriver.Chrome(options=chrome_options)

# Function to check if the cookies have expired
def cookies_expired(platform):
    sessionid_cookie = False
    filename = f"cookies/{platform}.txt"
    if os.path.exists(filename):

        # Compare the expiry timestamp of the session cookie with the current timestamp
        current_timestamp = int(datetime.now().timestamp())
        with open(filename, "r") as file:
            for line in file:

                # Skip comments and empty lines
                if line.startswith("#") or line.strip() == "":
                    continue
                    
                # Split the cookie line using regex to handle multiple spaces or tabs
                cookie = re.split(r'\s+', line.strip())

                # Ensure the cookie line has enough elements
                if len(cookie) < 6:
                    print(f"Invalid cookie line: {line}")
                    continue

                if cookie[5] == "sessionid":
                    sessionid_cookie = True
                    expiry_timestamp = int(cookie[4])
                    expiry_datetime = datetime.fromtimestamp(expiry_timestamp)
                    if expiry_timestamp < current_timestamp:
                        print(f"Session cookie for {platform} has expired. Regenerating...")
                        return True

            if not sessionid_cookie:
                print(f"No session cookie found for {platform}. Regenerating...")
                return True
    else:
        print(f"No cookies found for {platform}. Generating...")
        return True
    
    print(f"Session cookie for {platform} is still valid until {expiry_datetime}.")
    return False

# Load environment variables
load_dotenv()

# Check if another instance is running
if os.path.exists("cookies/.lock"):
    print("Another instance is running. Exiting...")
    exit()

# Create a lock file
with open("cookies/.lock", "w") as file:
    file.write("locked")

# Delete lock file on exit
def exit_with_unlock():
    if os.path.exists("cookies/.lock"):
        os.remove("cookies/.lock")
    exit()

# Instagram
if os.getenv("INSTAGRAM_COOKIES") == "true" and cookies_expired("instagram"):
    driver = init_driver()
    try:
        driver.get("https://www.instagram.com/accounts/login/")
        time.sleep(5)  # Wait for the page to load
        login_to_service(
            platform="instagram",
            username=os.getenv("INSTAGRAM_USERNAME"),
            password=os.getenv("INSTAGRAM_PASSWORD"),
            username_field=driver.find_element(By.NAME, "username"),
            password_field=driver.find_element(By.NAME, "password"),
            login_button=driver.find_element(By.XPATH, "//button[@type='submit']"),
            accept_cookies_button=driver.find_element(By.XPATH, "//button[text()='Allow all cookies']")
        )
    finally:
        driver.quit()

# TikTok
if os.getenv("TIKTOK_COOKIES") == "true" and cookies_expired("tiktok"):
    driver = init_driver()
    try:
        driver.get("https://www.tiktok.com/login/phone-or-email/email")
        time.sleep(5)  # Wait for the page to load
        login_to_service(
            platform="tiktok",
            username=os.getenv("TIKTOK_USERNAME"),
            password=os.getenv("TIKTOK_PASSWORD"),
            username_field=driver.find_element(By.NAME, "username"),
            password_field=driver.find_element(By.CSS_SELECTOR, "input[type='password']"),
            login_button=driver.find_element(By.XPATH, "//button[@type='submit']"),
            captcha_api_key=os.getenv("TIKTOK_CAPTCHA_API_KEY"),
            captcha_driver=driver,
            accept_cookies_button=driver.execute_script("""
                return document.querySelector('tiktok-cookie-banner')
                .shadowRoot.querySelectorAll('button')[1];
                """)
        )
    finally:
        driver.quit()

exit_with_unlock()